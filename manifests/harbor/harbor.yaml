---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kc-harbor-core
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "QVM3S1h5RUJnc0lrcHg1WA=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBb3UrYjBoMEtGMjFiTkxLRmtZZ3V5czZzT2ExTzhQanByVHdIYU9Xd0VQamtGUjV3CnF4ZVZIeEs4SUNCRCtLeVduNmxsU0hDVzAyM1VNanAxMnE0amZHVHJBeHUwL0wvSnJGNUtGN2pWdmx6V2d4anYKZ1QvckJMdm5POUZiOEpvZlFDeVA3TCtDb0VTaE5oa0Q1ek5jVlhXK1FPRFBmdklldzl1NytIWG9Nb0pUL2hqeAptRDJyZ0E3bndZOE5nRFZzY01taVpoTjFUUDVPSDhKOEJCQXhaVU5HZkdmaWNKYXV2WlJzZjR5dHNxRjdPYUZnCm1rMHRWVDlaZVV6blJ2TkpqU25hRVNEbXl0bktleThTd1V6RUYxSUpxalE3dUJKa2Z6V3FrNm5KV2pCSkdGV2IKblpGTHFLRXlKSWRwaUlMeEFXQ0hYemMxSERNN0pralB4dzBGeXdJREFRQUJBb0lCQUdXRFFTS01JeUJyYW5xUAppdlliMFlOYmRpUE5IVFMyNytlVlVjeUI1Y3I5TmlVT1BRWHJnR1hHcDF5Z25aaU45cDNzelFSdjJSaExBZngxClBiNEw1bUgzQWhDQ3I2VVUzRkkrd0l5OUJMWkFZd2wwZkt1YkpoSmgrM1BpUVJUTEFSTmJjQ1FCUVNJWEFCV1QKU2tJK1ZwV0w4UWU4eUtuL3NUazNhb29tODQ2YmN6L1RsWVk0TCtpKzM3QzhpeDFnK09FTVJRaTZrL3ZJUVZxTQoydzVJWldJenhSOFE0dVBneTl4UHEyMnNwZVZwZ29ZeFJKKythT0NYaW10VkdVWWYyODRWZGhxbGVJZUtZZnNOCjAwTU1CakhzcEhZTDc2TU9nRTNnVEp5L2lYTm1iemdFenhsVGxTUUp4NFc1RzJFUzdWb0NHMlIyRkNaVlhLcUIKUnRaZnl3a0NnWUVBMlNCanVTemtWZ1pYc3lmSVI5eENqSEhvYTV3bDcvV20zUFFFbzJEUktPR0lQTDFSUHQ5NAovYWVyaHB0TnZxZUhoS2JCZnMxdFovVlBBakZ2dkpvaGxvU3pxcUpORmRDN0NGbTNlOWlObGVYYnBFcHJuWXlvClNudzJTRkFmTUU1Qk5pTk1VdlFyeUxNbTk2cjdlUldPOE5zKzZTQlN1SmZ0QzRmcERJemFhVzhDZ1lFQXdCdDkKc3hncmlGZWllWmJTYW5kZE1IL0E0V041OEoxQkJ1R09mK1VUWXFoQVBKN0VrWGV6VFZPMUV1ek50Z3R6TWRHRQpVZDgyZ0xWZndSYjV1TG94RWFNNmlqNUZXUWZMaGpCd3hiVVZFWFA1RklWK1l0T1VxaWFiSUthUW1NUE90S3Q5Cjhic1hmT2VhWHJFa2pvaUU1ZVJEeDR3VktzbTRqd2hRZC9MYzQyVUNnWUVBbnFRM3VMakFMTXA5a1h6anJQMlYKOGgvWC9hZ2RYL0pRZE9nbDYybDE2VFMvNGdGQk4zcjRYL3orS2wrV3NsS2RoYUtCaGpCNlc1YTBuNW1YVm1vWApXRzZsQjJ1R2Z3WC9ZZDZMWFlXZ0RZSGd0VzFhcThaMXY5WjVvdVJIcFhmSDFkSjhsYStwdmY2SDNqV2pmNWpzCjA3YWRoS0FGVUxKUWxEZzlZdG9YU3lrQ2dZQXlMTHYyOCtBaTJ5aXZjeW4vN3E4alJLcSs4M2xjMCtXeEEyWngKbHdZcUpXR3BzNW9KbUdiM1VsNmYwOE9pd1hqVDBUSXJKQTZiTFVRV0xZY0pyVysxZUptSWs5ME85TTgrZkJabwpQUFNFdTNLWjNvZjFEZWZ0VE9vRmJCdW1Hclk1VC9VMEZyWjZ4QTc0bm5HNjNJTkJmQTRMNTFWNytIWEF2ZDR1Cmhmc1ZWUUtCZ0FyaUowRERpNkxOMHFRNVZvTDJOU1N0MEZDcWtzK2IrRTdRNUdzTFY0WXVNOGt0SE1KQi84THMKSzhFajZ6ajFDaFFzUFpsajc5emJFSkNDSjV4L25OK1lJWE40UWtmTSs0azJsTUxJdnN3S1h5MEFSWktaT0VtOApNcDRxT3JUUUZ0RWVhaW5wMGpqMlZQZHAxWGxkNisvWEoxSlVReStpeWpUVEtVQVgvaW9XCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRWWxKUmZrOVVJRHRyVUV0bEJ2TkxGakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qVXdOVEl6TVRrMU16QTVXaGNOTWpZdwpOVEl6TVRrMU16QTVXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNpNzV2U0hRb1hiVnMwc29XUmlDN0t6cXc1clU3dytPbXQKUEFkbzViQVErT1FWSG5DckY1VWZFcndnSUVQNHJKYWZxV1ZJY0piVGJkUXlPblhhcmlOOFpPc0RHN1Q4djhtcwpYa29YdU5XK1hOYURHTytCUCtzRXUrYzcwVnZ3bWg5QUxJL3N2NEtnUktFMkdRUG5NMXhWZGI1QTRNOSs4aDdECjI3djRkZWd5Z2xQK0dQR1lQYXVBRHVmQmp3MkFOV3h3eWFKbUUzVk0vazRmd253RUVERmxRMFo4WitKd2xxNjkKbEd4L2pLMnlvWHM1b1dDYVRTMVZQMWw1VE9kRzgwbU5LZG9SSU9iSzJjcDdMeExCVE1RWFVnbXFORHU0RW1SLwpOYXFUcWNsYU1Fa1lWWnVka1V1b29USWtoMm1JZ3ZFQllJZGZOelVjTXpzbVNNL0hEUVhMQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVckVraWtUbkx1T3k3MFZ2TDBTS3ppeWdkZkJvdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRzdFR1g4MjB0VThUT29qTVZMVzJwdGJLYmxBemsvTUxBL3RVUkRlClVLSkEwWmtXQklCaE05VkZlTkdueFpEUmlRVzAwVHdUNTNRdnp4WFplaWs2aEFoOWVZemdkVjI3K3FlNjVGdmwKZjV5RjBwcG9zNDdONXplMlI5K0cwcGlsYTFFUmwwejhkdTkxNkZQdndzNHN0WTZVUjZYSTNEVFZxTnhTbHVQeAp2KzFxbUZ4b283UE05WHNRbTBodnFnZkFScEowWHJreUEzL20vTERoOHVUR0prcko2QXMvT05MTW9qR0FQSkFXCkd1UWdmNkdmOW5aaWx1MmtNWG1RajRNbUdLN09Nb0hWRnZyR1l1QzRnb3VxTUJZSmh4N25ibzhlUGtNSytkMksKaUQwSWxkZXcrN2NjdWpidmJUVWZSSVNTTTJDMVJRVnNROHhLV251cUNhQ3lZeGM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "S0NAYWRtaW4xMjM0IQ=="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "V3NZSm42c0gzWEJDbkZYMEJicVN5M0hoZEVmYW9Pb24="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-database"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-jobservice"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  JOBSERVICE_SECRET: "eU11TVIyR0g1MzlCOFVGRQ=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registry"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "UUJjTk9vZjFVS0k3eFlQdQ=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registry-htpasswd"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJHFDZ2Z5OUNTLlVybjRxZ2lhZ1JocnVYTHdKS3UveFVUL0QvM0VYNnhuTTc4YmxRckU3VEc2"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registryctl"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kc-harbor-trivy
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9rYy1oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kc-harbor-core
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "kc-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "http://harbor.klovercloud.com"
  CORE_URL: "http://kc-harbor-core:80"
  JOBSERVICE_URL: "http://kc-harbor-jobservice"
  REGISTRY_URL: "http://kc-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://kc-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://kc-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://kc-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://kc-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://kc-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://kc-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  CACHE_ENABLED: "true"
  CACHE_EXPIRE_HOURS: "24"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-jobservice-env"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
  CORE_URL: "http://kc-harbor-core:80"
  TOKEN_SERVICE_URL: "http://kc-harbor-core:80/service/token"
  REGISTRY_URL: "http://kc-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://kc-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"

  LOG_LEVEL: "info"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  _REDIS_URL_CORE: "redis://kc-harbor-redis:6379/0?idle_timeout_seconds=30"
  CACHE_ENABLED: "true"
  CACHE_EXPIRE_HOURS: "24"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-jobservice"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://kc-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-portal"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-registry"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: kc-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      enableTLS: false
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-registryctl"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kc-harbor-jobservice
  namespace: "default"
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: local-path
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kc-harbor-registry
  namespace: "default"
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: registry
    app.kubernetes.io/component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: local-path
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kc-harbor-core
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-database"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - port: 5432
  selector:
    release: kc-harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-jobservice"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-portal"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kc-harbor-redis
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - port: 6379
  selector:
    release: kc-harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-registry"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-trivy"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kc-harbor-core
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: core
    app.kubernetes.io/component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: core
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: 687ead17a657785e1e3aa1497647cee463bd6a76a186b01b6d4b83b3df1e8bf8
        checksum/secret: db0b096b699bc4aa04ce58a2a5b89d3303c84da422a28534a845edb5e5431831
        checksum/secret-jobservice: 623a34e72431ccd08c53ee5fe010898f62c604a3bb8dfff4a2866acc27c7b9ba
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "kc-harbor-core"
        - secretRef:
            name: "kc-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-jobservice
                key: JOBSERVICE_SECRET
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: psc
          mountPath: /etc/core/token
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: kc-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: kc-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: kc-harbor-core
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-jobservice"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: jobservice
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap: 3b8b9f08d76a878ea0b2c3ab74c040e10aafb7fc648ce6bb95a7660105d4ca22
        checksum/configmap-env: 37f94e03c87a1b416de0b7dc8772ca232d1cc68b9f67988b1f938b3e49230cb3
        checksum/secret: e77c3d67cbab0e45cc2a3398eb26fb0a30c47da90b4e5444e6f73e06f04e2661
        checksum/secret-core: f9a74bf04ac4aa9fd534780a02919d771dc4edb372b57621a511a77906110b59
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-core
                key: secret
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "kc-harbor-jobservice-env"
        - secretRef:
            name: "kc-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "kc-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: kc-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-portal"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: portal
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: portal
        app.kubernetes.io/component: portal
      annotations:
        checksum/configmap: cec6853a8e52ceecffdb49e1f6fcf2e4ceff9b514ecfa228ead74f8f2cc18c27
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "kc-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-registry"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: registry
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: registry
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: 2fbffb14154cdf6b76c4c1f53bfbafbe8cd693ac2104b6726892740d8244913d
        checksum/secret: cc6855ec29caf0b7bc188abc718447db9f14acd57f235e9d769f7fe23ecfd726
        checksum/secret-jobservice: d249a50b9955322df5765fd0b4d2960f5c94f9558b5677aa23192ef196b04692
        checksum/secret-core: 73817dbf59e75c4e519bb788672892095d3e35f9b2801043f15150f7e0fa3e93
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 2Gi
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - secretRef:
            name: "kc-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "kc-harbor-registryctl"
        - secretRef:
            name: "kc-harbor-registry"
        - secretRef:
            name: "kc-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: kc-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: kc-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: kc-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "kc-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: kc-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "kc-harbor-database"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: database
    app.kubernetes.io/component: database
spec:
  replicas: 1
  serviceName: "kc-harbor-database"
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: database
        app.kubernetes.io/component: database
      annotations:
        checksum/secret: 67d09d2a28f683f21df3832498c5e3febea712863825576f2345a60ef202ac23
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: "1"
            memory: 1Gi
        envFrom:
          - secretRef:
              name: "kc-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "10Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kc-harbor-redis
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: redis
    app.kubernetes.io/component: redis
spec:
  replicas: 1
  serviceName: kc-harbor-redis
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: redis
        app.kubernetes.io/component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kc-harbor-trivy
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
    component: trivy
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: kc-harbor-trivy
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: kc-harbor
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.0"
        component: trivy
        app.kubernetes.io/component: trivy
      annotations:
        checksum/secret: b18ceddac13f2344936a5c0c772cfc02d37b8abddf2ef0dc60551f075c3c9acf
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:dev
          imagePullPolicy: IfNotPresent
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "kc-harbor-ingress"
  namespace: "default"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: kc-harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.0"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-portal
            port:
              number: 80
    host: harbor.klovercloud.com
